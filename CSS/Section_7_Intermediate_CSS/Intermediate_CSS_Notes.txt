The Cascade - Specificity and Inheritance:
------------------------------------------

    Just like python, CSS will update with the latest style written

    like:
        1st external file css will apply 
        2nd it will check wether the internal file is having any style or not
            if yes it will override the existing css.

CSS Level of Importance:
------------------------
    It is based on 4 pillars:
        1. Position
        2. Specificity
        3. Type
        4. Importance


    1. Position:
    -----------
    The lower level or latest css style will override the upper level or old.

        li{
            color: red;     ---> This is the old/upper level css
            color: blue;    ---> This is the latest/lower level css -- This will overide the upper css
        }
        So, the lower down the file the rule is more important it is.

    2. Specificity:
    ---------------
    It is like little bit of filtering and applying

    ex:
    <li id="first-id" class="first-class" draggagble>

        li {color: blue;}                   ---> element level, This will for all the li elements
        .first-class {color: red;}          ---> class, this will apply for the elements having this class - basicallly as we know class is used to group the elements 
                                                so, here it will apply the color for the group of elements having the class as .first-class
        li[draggable] {color: purple;}      --->attirbute: Using the attribute we can apply the css, this is also almost like class but different
        #first-id {color: orange;}          --->id, Since is unique css will be applicable for the one id element

        From the above example what we can say is 
        at level 1 - everything will be in blue color
        at level 2 - few elements will change from blue to red
        at level 3 - among those red and blue, few will chnage into purple 
        at last level - only item having that id will chnage into orange remaining will be having their own colors

        But here all the above items present in single html then that will turn into ornage since id is lastly applied and that id is exist in that html

        The more spcific it is the more css rule will apply

    3. Type:
    --------
    It is like applying css based on how we are applying the css type
        like External, internal or inline

        as we know external will applicable for all the we pages
        internal will applicable only for that page and 
        inline is applicable for that one particular element 

        here the level of execution is External > Internal > inline
        Ex:
            <link href="./style.css" rel="stylesheet">      --->External
            <style> </styel>                                ---> Internal
            <h1 style=" ">Hello</h1>                        ---> inline

    4. Importance:
    --------------
    Ex:
        color: red;
        color: green !importance;           ---> This !important Keyword will ensure that this will be the most important rule relative to that element

        It doesnt matter whther the upper rule is id or inline or it is a very bottom line 
        the rule withe keyword !important will execute as a last level

Combining CSS Selectors:
------------------------
    CSS selectors are patterns used to select and style HTML elements.
    Example:
        h1 { color: red; }
        .my-class { padding: 10px; }
        div > p { margin: 0; }
    These are used within stylesheets to apply styles to HTML elements.
    Used for styling the webpage.

    Ways to combine css selectors:
    ------------------------------
        Exaample html:
        <body>
            <h1>To Do List</h1>
            <h2>Monday</h2>
            <div class="box">
                <p class="done">Do these things today!</p>
                <ul class="list">
                <li>Wash Clothes</li>
                <li class="done">Read</li>
                <li class="done">Maths Questions</li>
                </ul>
            </div>
            <ul>
                <p class="done">Other items</p>
            </ul>
            <p>The best preparation for tomorrow is doing your best today.</p>
        </body>


        1. Grouping selectors

            syntax:
                selector, selector{
                    color: blueviolet;
                }

            Ex:
                h1,h2{
                    color: blueviolet;
                }

            Here we will be applying same color to two different elements by seperating the tag with coma.

        2. Child
            syntax:
                selector1 > selector2{
                    color: firebrick;
                }
            In this case selector1 is parent and selector2 is child.
            Here child should be Direct child. That is, not a grand child, not a Great Grand child
            This will work for one level child.

            Ex:
                div > p{
                    color:firebrick
                }
        
        3. Descendant
            syntax:
                selector1 selector2{
                    color: blue;
                }

            Here selector1  --> Ancistor
                selector2 ---> descendent
                Desscendant = Apply to a descendant(selector2) of left side selector(i.e selector1)

            Ex:
                .box li {
                    color: blue;
                }

        4. Chaining
            syntax:
                selecto1selecto2{
                    color: seagreen;
                }

            Here Chaining = Apply where ALL selectors are true.
            there is no space between those selectors.

            Ex:
            html:
                <h1 id="title" class=" big heading">Hello World</h>
                lets say this above html line exist in two pleaces at some other line but we want to configure different color to them

                we can do it by using this chaining concept.

            css:
                h1#title.big.heading{
                    color: seagreen;
                }

                or

                h1.heading{
                    color : seagreen;
                }

                we can use chaining with the attributes
                NOTE: We should always write them in asscending order

                Ex: According to this html --> <h1 id="title" class=" big heading">Hello World</h>
                    h1 element should come 1st later we can write id but not id and h1
                    after id, class should come but not class before the id
                    dont write class 1st and element next beacuse it will looks like everything is class since there is no space ---> .bigh1
        
        5. Combining combiners
            syntax:
                selector1 selector2selector3{
                    fontsize: 2rem;
                }

            Ex:
                ul  p.done{             ---> Combining combiners using the "Descendant and chaining" method
                    font-size: 0.5rem;
                }

                or 

                ul > p{                 ---> using the child combination
                    fontsize:0.5rem
                }

                or 

                ul > p.done{            --->Combining combiners using the "child and chaining" method
                    fontsize:0.5rem
                }